//
//  NavigationRouter.swift
//  UWBViewerSystem
//
//  Created by ÁâßÈáéÈÅ•Êñó on R 7/04/07.
//

import SwiftUI

/// ÁîªÈù¢ÈÅ∑Áßª„ÅÆ„É´„Éº„ÉÜ„Ç£„É≥„Ç∞„Çí„Åæ„Å®„ÇÅ„Å¶„ÅÑ„Çã
///
/// - Note: NavigationRouterModel„Çí‰ΩøÁî®„Åó„Å¶„ÄÅÁîªÈù¢ÈÅ∑Áßª„ÇíË°å„ÅÜ
/// - Note: NavigationRouterModel„ÅØObservableObject„ÇíÁ∂ôÊâø„Åó„Å¶„ÅÑ„Çã„Åü„ÇÅ„ÄÅ@EnvironmentObject„Åß‰ΩøÁî®„Åô„Çã„Åì„Å®„Åå„Åß„Åç„Çã
struct NavigationRouter: View {
    @EnvironmentObject var router: NavigationRouterModel

    var body: some View {
        Group {
            NavigationStack(path: $router.path) {
                rootView
                    .navigationDestination(for: Route.self) { route in
                        print("üéØ NavigationStack destinationView called for route: \(route)")
                        return destinationView(for: route)
                    }
                    .onChange(of: router.path) { _, newPath in
                        print("üéØ NavigationStack path changed, count: \(newPath.count)")
                    }
            }
        }
        .onAppear {
            print("üîç NavigationRouter: NavigationStack appeared")
            // „Ç¢„Éó„É™Ëµ∑ÂãïÊôÇ„ÅÆÂàùÊúüÂåñ
            Task {
                await router.initializeApp()
            }
        }
    }

    @ViewBuilder
    private var rootView: some View {
        switch router.appState {
        case .initializing:
            WelcomeView()
        case .authenticated:
            MainTabView()
        case .unauthenticated:
            WelcomeView()
        }
    }

    @ViewBuilder
    private func destinationView(for route: Route) -> some View {
        switch route {
        // Êñ∞„Åó„ÅÑÁîªÈù¢ÈÅ∑Áßª„Éï„É≠„Éº
        case .welcomePage:
            WelcomeView()
        case .indoorMapRegistration:
            IndoorMapRegistrationView()
        case .deviceSelection:
            DeviceSelectionView()
        case .antennaPositioning:
            AntennaPositioningView()
        case .calibration:
            CalibrationView()
        case .sensingManagement:
            SensingManagementView()
        case .trajectoryView:
            TrajectoryView()
            
        // Êó¢Â≠ò„ÅÆÁîªÈù¢
        case .fieldSettingPage:
            FieldSettingView()
        case .pairingSettingPage:
            PairingSettingView()
        case .homePage:
            NewHomeView()
        case .dataCollectionPage:
            DataCollectionView()
        case .dataDisplayPage:
            DataDisplayView()
        case .connectionManagementPage:
            ConnectionManagementView()
        case .editPage:
            EditView()
        case .advertiserPage:
            AdvertiserView()
        case .mainTabView:
            MainTabView()
        }
    }
}
