# Swift Testing CI/CD Pipeline
name: Swift Test

on:
  pull_request:
    branches: [main]
    paths:
      - '**.swift'
      - 'Package.swift'
      - 'Package.resolved'
      - '.github/workflows/swift-test.yml'
  push:
    branches: [main]
    paths:
      - '**.swift'
      - 'Package.swift'
      - 'Package.resolved'
      - '.github/workflows/swift-test.yml'
  workflow_dispatch: # 手動実行を許可

jobs:
  swift-test:
    name: Swift Testing
    runs-on: macos-latest

    strategy:
      matrix:
        configuration: [debug, release]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Cache Swift Package Manager
        uses: actions/cache@v4
        with:
          path: |
            .build
            ~/Library/Caches/org.swift.swiftpm/
          key: ${{ runner.os }}-spm-${{ hashFiles('Package.resolved', 'Package.swift') }}
          restore-keys: |
            ${{ runner.os }}-spm-

      - name: Resolve dependencies
        run: swift package resolve

      - name: Build project
        run: swift build --configuration ${{ matrix.configuration }}

      - name: Run Swift Tests
        run: |
          echo "Running Swift Testing framework tests..."
          swift test --configuration ${{ matrix.configuration }} \
            --enable-swift-testing \
            --disable-xctest \
            --parallel \
            --enable-code-coverage \
            --xunit-output test-results-${{ matrix.configuration }}.xml

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.configuration }}
          path: test-results-${{ matrix.configuration }}.xml
          retention-days: 7

      - name: Generate code coverage report
        if: matrix.configuration == 'debug'
        run: |
          # Swift Testingでコードカバレッジレポートを生成
          swift test --enable-code-coverage --show-codecov-path > coverage-path.txt
          COVERAGE_PATH=$(cat coverage-path.txt)
          echo "Code coverage report path: $COVERAGE_PATH"

          # カバレッジデータが存在する場合のみ処理
          if [ -f "$COVERAGE_PATH" ]; then
            echo "Code coverage data found at: $COVERAGE_PATH"
          else
            echo "No code coverage data found"
          fi

      - name: Upload code coverage
        uses: actions/upload-artifact@v4
        if: matrix.configuration == 'debug'
        with:
          name: code-coverage
          path: |
            **/*.profdata
            **/*.profraw
          retention-days: 7

      - name: Publish test results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Swift Test Results (${{ matrix.configuration }})
          path: test-results-${{ matrix.configuration }}.xml
          reporter: java-junit
          fail-on-error: true

  swift-format-check:
    name: Swift Format Check
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Run SwiftFormat check
        run: |
          cd ./BuildTools
          swift build
          swift run -c release swiftformat ../ --lint

  build-status:
    name: Build Status Summary
    runs-on: macos-latest
    needs: [swift-test, swift-format-check]
    if: always()

    steps:
      - name: Check build status
        run: |
          echo "Swift Test Status: ${{ needs.swift-test.result }}"
          echo "Swift Format Status: ${{ needs.swift-format-check.result }}"

          if [[ "${{ needs.swift-test.result }}" == "success" && "${{ needs.swift-format-check.result }}" == "success" ]]; then
            echo "✅ All checks passed!"
            exit 0
          else
            echo "❌ Some checks failed!"
            exit 1
          fi